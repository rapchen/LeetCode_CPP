//
// Created by rapch on 2021/12/12.
//
#include <string>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <numeric>

using namespace std;

class Solution {
public:
    vector<int> smallestTrimmedNumbers(vector<string>& nums, vector<vector<int>>& queries) {
        int l = nums[0].size();
        vector<int> ans;
        for (auto query: queries) {
            int k = query[0], trim = query[1];
            // trimmed
            vector<string> t;
            t.reserve(nums.size());
            for (string& num: nums) {
                t.emplace_back(num.substr(l - trim));
            }

            // 建立下标数组
            vector<size_t> idx(t.size());
            iota(idx.begin(), idx.end(), 0);
            // 调用sort函数，匿名函数自动捕获待排序数组
            stable_sort(idx.begin(), idx.end(),
                [&t](size_t i1, size_t i2) {
                    return t[i1] < t[i2];
                });
            ans.emplace_back(idx[k - 1]);
        }
        return ans;
    }
};

int main() {
//    vector<string> nums = {"102","473","251","814"};
//    vector<vector<int>> queries = {{1, 1},{2, 3},{4, 2},{1, 2}};
    vector<string> nums = {"7062852270146477248296527","8433780701670054260678760","8699421879227760163019849","7708276868930722275669591","5074829025635016047494703","5896327888048068611168261","7260190089159791786288449","5781138574494763732963172","3205437840168891808107684","5391561242659929681878939","9291899334089749518212291","8708326599236172552237668","3618812336262173046978703","4807369922822632937475631","0316892108136392839378991","8367705082821693868985331","2107315678805939657548178","9907244113601275760502412","4677127508895251971677534","1439698519575527518052264","2511775183710951968637133","6664307020593448841804234","3713561166640567497350787","9222117189171058392839857","9814178925901695758525967","1730249210741355068666166","4032999420142272853817457"};
    vector<vector<int>> queries = {{5,21},{23,7},{6,2},{27,8},{14,21},{25,21},{26,23},{12,19},{7,8},{25,9},{11,8},{17,17},{21,8},{1,18},{16,18},{13,1},{27,7},{11,1},{4,7},{24,14},{9,1},{14,25},{2,13},{7,21},{15,1},{9,6},{7,2},{23,20},{15,20},{21,1}};
    Solution().smallestTrimmedNumbers(nums, queries);
}

//{"7062852270146477248296527","8433780701670054260678760","8699421879227760163019849","7708276868930722275669591","5074829025635016047494703","5896327888048068611168261","7260190089159791786288449","5781138574494763732963172","3205437840168891808107684","5391561242659929681878939","9291899334089749518212291","8708326599236172552237668","3618812336262173046978703","4807369922822632937475631","0316892108136392839378991","8367705082821693868985331","2107315678805939657548178","9907244113601275760502412","4677127508895251971677534","1439698519575527518052264","2511775183710951968637133","6664307020593448841804234","3713561166640567497350787","9222117189171058392839857","9814178925901695758525967","1730249210741355068666166","4032999420142272853817457"}
//{{5,21},{23,7},{6,2},{27,8},{14,21},{25,21},{26,23},{12,19},{7,8},{25,9},{11,8},{17,17},{21,8},{1,18},{16,18},{13,1},{27,7},{11,1},{4,7},{24,14},{9,1},{14,25},{2,13},{7,21},{15,1},{9,6},{7,2},{23,20},{15,20},{21,1}}

//"111100010000011101001110001111000000001011101111111110111000011111011000010101110100110110001111001001011001010011010000011111101001101000000101101001110110000111101011000101"
//11713332
// 96 （113？）